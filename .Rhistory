usethis::use_mit_license()
usethis::use_mit_license()
devtools::load_all(".")
X <- matrix(rnorm(n*p), n, p)
n <- 100
p <- 500
X <- matrix(rnorm(n*p), n, p)
S <- 1/n * tcrossprod(X)
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(1,2))
n <- 1000
p <- 500
X <- matrix(rnorm(n*p), n, p)
S <- 1/n * tcrossprod(X)
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(1,2))
n <- 50
p <- 100
X <- matrix(rnorm(n*p), n, p)
S <- 1/n * tcrossprod(X)
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(1,2))
usethis::use_build_ignore(files = c("notes"))
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(1,50))
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(0.1,50))
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(0.1,50))
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(0.1,50))
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(0.1,50))
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(0.1,50))
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(0.1,50))
devtools::load_all(".")
step1(eigen(S)$values, n, p, 0.1, theta_interval = c(0.1,50))
step1(eigen(S)$values, n, p, 0.1)
n <- 500
p <- 100
X <- matrix(rnorm(n*p), n, p)
S <- 1/n * tcrossprod(X)
step1(eigen(S)$values, n, p, 0.1)
step1(eigen(S)$values, n, p, 0.1, B = 5)
step1(eigen(S)$values, n, p, 0.1, B = 20)
step1(eigen(S)$values, n, p, 0.1, B = 2)
step1(eigen(S)$values, n, p, 0.1, B = 5)
step1(eigen(S)$values, n, p, 0.1, B = 50)
step1(eigen(S)$values, n, p, 0.1, B = 20)
devtools::load_all(".")
step1(eigen(S)$values, n, p, 0.1, B = 20)
?svd
devtools::load_all(".")
getQT1(n = 100, p = 100, theta = 3, B = 20)
devtools::load_all(".")
getQT1(n = 100, p = 100, theta = 3, B = 20) == getQT1_svd(n = 100, p = 1==, theta = 3, B = 20)
getQT1(n = 100, p = 100, theta = 3, B = 20) == getQT1_svd(n = 100, p = 1, theta = 3, B = 20)
getQT1(n = 100, p = 100, theta = 3, B = 20) == getQT1_svd(n = 100, p = 100, theta = 3, B = 20)
plot(getQT1(n = 100, p = 100, theta = 3, B = 20), getQT1_svd(n = 100, p = 100, theta = 3, B = 20))
devtools::load_all(".")
plot(getQT1(n = 100, p = 100, theta = 3, B = 20), getQT1_svd(n = 100, p = 100, theta = 3, B = 20))
microbenchmark::microbenchmark(eigen = getQT1(n = 100, p = 500, theta = 3, B = 20),
svd = getQT1_svd(n = 100, p = 500, theta = 3, B = 20))
?rgamma
?mvrnorm
?quantile
quantile(x = rnorm(100), probs = 0.75)
quantile(x = rnorm(100), probs = 0.75)[1]
quantile(x = rnorm(100), probs = 0.9)
quantile(x = rnorm(100), probs = 0.9)
quantile(x = rnorm(100), probs = 0.9)
quantile(x = rnorm(100), probs = 0.95)
quantile(x = rnorm(100), probs = 0.95)
quantile(x = rnorm(100), probs = 0.95)
quantile(x = rnorm(100), probs = 0.95)
quantile(x = rnorm(100), probs = 0.95)
quantile(x = rnorm(100), probs = 0.95)
quantile(x = rnorm(100), probs = 0.95)
quantile(x = rnorm(100), probs = 0.95)
devtools::load_all(".")
n <- 500
p <- 100
X <- matrix(rnorm(n*p), n, p)
S <- 1/n * tcrossprod(X)
step1(eigen(S)$values, n, p, 0.1, B = 20)
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
n <- 500
p <- 100
K <- 5
rho <- 5
mu_k <- rho * sqrt(p/n)
vectors <- svd(matrix(rnorm(p*p), p, p))$u[,1:K]
Sigma <- tcrossprod(sqrt(mu_k) * vectors)
svd(Sigma)$d
eigen(Sigma)$values
2.236^2
Sigma <- tcrossprod(mu_k * vectors) + diag(rgamma(p, theta, rate = theta/sigma2))
theta <- 5
sigma2 <- 1
Sigma <- tcrossprod(mu_k * vectors) + diag(rgamma(p, theta, rate = theta/sigma2))
svd(Sigma)$d
X <- mvrnorm(n = n, mu = rep(0, p), Sigma = Sigma)
S <- 1/n * tcrossprod(X)
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
step1_out
devtools::load_all(".")
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
devtools::load_all(".")
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
devtools::load_all(".")
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
library(profvis)
profvis({
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
})
devtools::load_all(".")
profvis({
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
})
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
devtools::load_all(".")
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
step1_out
profvis({
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
})
n <- 5000
p <- 1000
K <- 5
rho <- 5
mu_k <- rho * sqrt(p/n)
vectors <- svd(matrix(rnorm(p*p), p, p))$u[,1:K]
theta <- 5
sigma2 <- 1
Sigma <- tcrossprod(mu_k * vectors) + diag(rgamma(p, theta, rate = theta/sigma2))
X <- mvrnorm(n = n, mu = rep(0, p), Sigma = Sigma)
S <- 1/n * tcrossprod(X)
profvis({
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
})
n <- 50
p <- 100
K <- 5
rho <- 5
mu_k <- rho * sqrt(p/n)
vectors <- svd(matrix(rnorm(p*p), p, p))$u[,1:K]
theta <- 5
sigma2 <- 1
Sigma <- tcrossprod(mu_k * vectors) + diag(rgamma(p, theta, rate = theta/sigma2))
X <- mvrnorm(n = n, mu = rep(0, p), Sigma = Sigma)
S <- 1/n * tcrossprod(X)
profvis({
step1_out <- step1(eigen(S)$values, n, p, 0.1, B = 20)
step2(eigen(S)$values, n, p, beta = 0.2, M = 500, step1_output = step1_out)
})
